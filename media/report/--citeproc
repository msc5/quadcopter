<!DOCTYPE html>
<html xmlns="http://www.w3.org/1999/xhtml" lang="" xml:lang="">
<head>
  <meta charset="utf-8" />
  <meta name="generator" content="pandoc" />
  <meta name="viewport" content="width=device-width, initial-scale=1.0, user-scalable=yes" />
  <title>main</title>
  <style>
    html {
      line-height: 1.5;
      font-family: Georgia, serif;
      font-size: 20px;
      color: #1a1a1a;
      background-color: #fdfdfd;
    }
    body {
      margin: 0 auto;
      max-width: 36em;
      padding-left: 50px;
      padding-right: 50px;
      padding-top: 50px;
      padding-bottom: 50px;
      hyphens: auto;
      overflow-wrap: break-word;
      text-rendering: optimizeLegibility;
      font-kerning: normal;
    }
    @media (max-width: 600px) {
      body {
        font-size: 0.9em;
        padding: 1em;
      }
      h1 {
        font-size: 1.8em;
      }
    }
    @media print {
      body {
        background-color: transparent;
        color: black;
        font-size: 12pt;
      }
      p, h2, h3 {
        orphans: 3;
        widows: 3;
      }
      h2, h3, h4 {
        page-break-after: avoid;
      }
    }
    p {
      margin: 1em 0;
    }
    a {
      color: #1a1a1a;
    }
    a:visited {
      color: #1a1a1a;
    }
    img {
      max-width: 100%;
    }
    h1, h2, h3, h4, h5, h6 {
      margin-top: 1.4em;
    }
    h5, h6 {
      font-size: 1em;
      font-style: italic;
    }
    h6 {
      font-weight: normal;
    }
    ol, ul {
      padding-left: 1.7em;
      margin-top: 1em;
    }
    li > ol, li > ul {
      margin-top: 0;
    }
    blockquote {
      margin: 1em 0 1em 1.7em;
      padding-left: 1em;
      border-left: 2px solid #e6e6e6;
      color: #606060;
    }
    code {
      font-family: Menlo, Monaco, 'Lucida Console', Consolas, monospace;
      font-size: 85%;
      margin: 0;
    }
    pre {
      margin: 1em 0;
      overflow: auto;
    }
    pre code {
      padding: 0;
      overflow: visible;
      overflow-wrap: normal;
    }
    .sourceCode {
     background-color: transparent;
     overflow: visible;
    }
    hr {
      background-color: #1a1a1a;
      border: none;
      height: 1px;
      margin: 1em 0;
    }
    table {
      margin: 1em 0;
      border-collapse: collapse;
      width: 100%;
      overflow-x: auto;
      display: block;
      font-variant-numeric: lining-nums tabular-nums;
    }
    table caption {
      margin-bottom: 0.75em;
    }
    tbody {
      margin-top: 0.5em;
      border-top: 1px solid #1a1a1a;
      border-bottom: 1px solid #1a1a1a;
    }
    th {
      border-top: 1px solid #1a1a1a;
      padding: 0.25em 0.5em 0.25em 0.5em;
    }
    td {
      padding: 0.125em 0.5em 0.25em 0.5em;
    }
    header {
      margin-bottom: 4em;
      text-align: center;
    }
    #TOC li {
      list-style: none;
    }
    #TOC ul {
      padding-left: 1.3em;
    }
    #TOC > ul {
      padding-left: 0;
    }
    #TOC a:not(:hover) {
      text-decoration: none;
    }
    code{white-space: pre-wrap;}
    span.smallcaps{font-variant: small-caps;}
    div.columns{display: flex; gap: min(4vw, 1.5em);}
    div.column{flex: auto; overflow-x: auto;}
    div.hanging-indent{margin-left: 1.5em; text-indent: -1.5em;}
    ul.task-list{list-style: none;}
    ul.task-list li input[type="checkbox"] {
      width: 0.8em;
      margin: 0 0.8em 0.2em -1.6em;
      vertical-align: middle;
    }
  </style>
  <script
  src="https://cdn.jsdelivr.net/npm/mathjax@3/es5/tex-chtml-full.js"
  type="text/javascript"></script>
  <!--[if lt IE 9]>
    <script src="//cdnjs.cloudflare.com/ajax/libs/html5shiv/3.7.3/html5shiv-printshiv.min.js"></script>
  <![endif]-->
</head>
<body>
<div class="center">
<p>Quadcopter Dynamics and Numerical Simulation<br />
MAE 542 Final Project<br />
Matthew Coleman<br />
December 6, 2022</p>
</div>
<h1 id="introduction">Introduction</h1>
<figure>
<img src="proposal/quadcopter.jpg" id="fig:quadcopter_img"
style="width:70.0%" alt="DJI Mavic 3 Quadcopter" />
<figcaption aria-hidden="true">DJI Mavic 3 Quadcopter</figcaption>
</figure>
<p>A quadcopter is a helicopter with four propellers arranged in a
square formation. It can be controlled by rapidly changing the angular
velocity of each rotor independently, such that a directional thrust and
torque can be achieved about each rotor and likewise about the body of
the drone. They have a wide variety of uses including aerial
photography, search and rescue, agriculture, and surveillance <span
class="citation" data-cites="luukkonen2011modelling"></span>.</p>
<p>Although the structure is simple to construct and models are widely
accessible on consumer markets, the dynamics and control systems
required to make any use of the physical system are complex and
nonlinear. In addition, quadcopters can be expensive and difficult to
learn to control for a human operator. Thus, the setting is ideal for
rigorous dynamical analysis, and a comprehensive numerical simulation of
the quadrotor dynamics would be particularly helpful for someone that
wishes to learn how to pilot one without running the risk of destroying
it accidentally or otherwise damaging the drone or the surroundings.</p>
<p>In this work, I will derive the equations of motion of a quadcopter
using the Euler-Lagrange equations, develop a simple PID controller to
stabilize the drone horizontally, and present numerical simulations
testing the validity of the dynamics and controller. The code and
configurations used to generate these results are available at this <a
href="https://github.com/msc5/quadcopter">public repository</a>.</p>
<h1 id="problem-setup">Problem Setup</h1>
<h2 id="reference-frames">Reference Frames</h2>
<p>Figure <a href="#fig:frames" data-reference-type="ref"
data-reference="fig:frames">2</a> shows an inertial reference frame
<span class="math inline">\(\mathcal{I}\)</span> as well as the body
frame <span class="math inline">\(\mathcal{B}\)</span> of the
quadcopter, which has its origin centered on the quadcopter’s center of
mass <span class="math inline">\(G\)</span> and principle axes aligned
with the quadcopter’s rotors. The positions of the rotors <span
class="math inline">\(\bar{r}_i\)</span> are orthogonal to each other
and have identical length <span class="math inline">\(l\)</span>, and
their orientations are fixed in the body frame, i.e., they cannot rotate
independently of the drone structure. In the following derivations I
will consider the drone structure as a rigid body with controllable
point forces emitted upwards from the center of each rotor and moments
which act about the center of each rotor. The effects of air resistance
will be neglected.</p>
<figure>
<img src="figures/frames.png" id="fig:frames" style="width:70.0%"
alt="Quadcopter frames, forces and moments" />
<figcaption aria-hidden="true">Quadcopter frames, forces and
moments</figcaption>
</figure>
<p>With this setup laid out, the goal of this project is therefore to
derive the equations of motion of the quadrotor using the Lagrangian
formulation of dynamics and then to carry out numerical experiments
using the results. From the figure, one can imagine that the evolution
of the quadrotor state can easily become chaotic in flight, as it will
be very easy for small changes in the roll or pitch of the body to
produce oscillations or even invert the craft completely.</p>
<h2 id="forces-and-moments">Forces and Moments</h2>
<p>From Figure <a href="#fig:frames" data-reference-type="ref"
data-reference="fig:frames">2</a> it is clear that the net force on the
drone will be the sum of the 4 individual propeller thrusts acting
upwards along the body frame vertical axes. Each propeller generates a
thrust that is proportional to a constant <span
class="math inline">\(k\)</span> multiplied by its angular velocity
<span class="math inline">\(\omega_i\)</span> squared <span
class="citation" data-cites="gibiansky2012andrew"></span>. Thus:</p>
<p><span class="math display">\[\begin{gathered}
    f_i = k \omega_i^2
    , \quad
    \boldsymbol{F}= k \begin{pmatrix} 0 &amp; 0 &amp; \sum_{i=1}^4
\omega_i^2 \end{pmatrix}^T
    , \quad
    \boldsymbol{f}= B \boldsymbol{F}
\end{gathered}\]</span></p>
<p>describes the force <span
class="math inline">\(\boldsymbol{F}\)</span> on the quadrotor center of
mass in the body frame as well as the force <span
class="math inline">\(\boldsymbol{f}\)</span> on the quadrotor center of
mass in the inertial frame. The rotation matrix <span
class="math inline">\(B\)</span> which maps vectors in the body frame to
the inertial frame will be derived in the following section.</p>
<p>Furthermore, the moment produced by each rotor is proportional to a
different constant <span class="math inline">\(b\)</span> multiplied by
its angular velocity <span class="math inline">\(\omega_i^2\)</span>
squared. Since each rotor is fixed and the moments produced by each
blade are parallel, they can also be summed, i.e., <span
class="math inline">\(\boldsymbol{\tau}_\psi = \sum_i \tau_i\)</span>.
For <span class="math inline">\(\boldsymbol{\tau}_\theta\)</span> and
<span class="math inline">\(\boldsymbol{\tau}_\phi\)</span>, consider
the forces produced by the pairs of rotors opposite each other about the
origin. Also note, neighboring rotors spin in opposite directions.
Thus:</p>
<p><span class="math display">\[\begin{gathered}
    \boldsymbol{\tau}= \begin{pmatrix}
        l (f_1 - f_3) \\ l (f_2 - f_4) \\ \sum_{i=1}^4 \tau_i
    \end{pmatrix}
    = \begin{pmatrix}
        kl (\omega_1^2 - \omega_3^2) \\ kl (\omega_2^2 - \omega_4^2) \\
        b (\omega_1^2 - \omega_2^2 + \omega_3^2 - \omega_4^2)
    \end{pmatrix}
    \label{eqn:torque}
\end{gathered}\]</span></p>
<h2 id="rotation">Rotation</h2>
<p>Across several sources <span class="citation"
data-cites="beard2008quadrotor nakano2013quad fresk2013full"></span>,
the most varied choice in deriving the dynamics of the quadcopter is the
parametrization of rotation between the inertial frame <span
class="math inline">\(\mathcal{I}\)</span> and body frame <span
class="math inline">\(\mathcal{B}\)</span>. The most straightforward
approach, however, is the Euler-angle representation, which yields the
rotation matrix <span class="math inline">\(B\)</span> through the
composition of three rotations about a fixed principle axis.</p>
<p>Thus, the following generalized coordinates will be considered to
parametrize the rotations:</p>
<p><span class="math display">\[\begin{gathered}
    \boldsymbol{\eta}=
    \begin{pmatrix} \phi &amp; \theta &amp; \psi \end{pmatrix}^T
    , \quad
    \dot{\boldsymbol{\eta}} =
    \begin{pmatrix}
        \dot{\phi} &amp; \dot{\theta} &amp; \dot{\psi}
    \end{pmatrix}^T
\end{gathered}\]</span></p>
<p>Each component matrix of the Euler-angle representation along with
the final representation itself are members of the special orthogonal
group <span class="math inline">\(SO(3)\)</span>. As we have seen in
class, members of this group can be generated via matrix exponentials,
i.e. (Using <span class="math inline">\(c_\theta\)</span> to represent
<span class="math inline">\(\cos{\theta}\)</span> and <span
class="math inline">\(s_\theta\)</span> to represent <span
class="math inline">\(\sin{\theta}\)</span>, etc.):</p>
<p><span class="math display">\[\begin{gathered}
    e^{\phi \hat{e}_1} =
    \begin{pmatrix}
        1 &amp; 0 &amp; 0 \\
        0 &amp; \text{c}_{\phi} &amp; -\text{s}_{\phi} \\
        0 &amp; \text{s}_{\phi} &amp; \text{c}_{\phi} \\
    \end{pmatrix}, \quad
    e^{\theta \hat{e}_2} =
    \begin{pmatrix}
        \text{c}_{\theta} &amp; 0 &amp; \text{s}_{\theta} \\
        0 &amp; 1 &amp; 0 \\
        -\text{s}_{\theta} &amp; 0 &amp; \text{c}_{\theta} \\
    \end{pmatrix}, \quad
    e^{\psi \hat{e}_3} =
    \begin{pmatrix}
        \text{c}_{\psi} &amp; -\text{s}_{\psi} &amp; 0 \\
        \text{s}_{\psi} &amp; \text{c}_{\psi} &amp; 0 \\
        0 &amp; 0 &amp; 1 \\
    \end{pmatrix}
\end{gathered}\]</span></p>
<p>There are numerous conventions of the rotation matrix, but in this
case I will use the Tait-Bryan convention representing a sequence of
yaw, pitch, and roll angles, which is the most common in the aerospace
setting. Thus, the final representation of the rotation through <span
class="math inline">\(\psi\)</span>, <span
class="math inline">\(\theta\)</span>, and <span
class="math inline">\(\phi\)</span> successively is given by the
following:</p>
<p><span class="math display">\[\begin{aligned}
    B(\phi, \theta, \psi)
    &amp; =
    e^{\psi \hat{e}_3}
    e^{\theta \hat{e}_2}
    e^{\phi \hat{e}_1}
    \\
    &amp; =
    \begin{pmatrix}
        \text{c}_{\psi} &amp; -\text{s}_{\psi} &amp; 0 \\
        \text{s}_{\psi} &amp; \text{c}_{\psi} &amp; 0 \\
        0 &amp; 0 &amp; 1 \\
    \end{pmatrix}
    \begin{pmatrix}
        \text{c}_{\theta} &amp; 0 &amp; \text{s}_{\theta} \\
        0 &amp; 1 &amp; 0 \\
        -\text{s}_{\theta} &amp; 0 &amp; \text{c}_{\theta} \\
    \end{pmatrix}
    \begin{pmatrix}
        1 &amp; 0 &amp; 0 \\
        0 &amp; \text{c}_{\phi} &amp; -\text{s}_{\phi} \\
        0 &amp; \text{s}_{\phi} &amp; \text{c}_{\phi} \\
    \end{pmatrix} \\
     &amp; =
     \begin{pmatrix}
     \text{c}_{\psi } \text{c}_{\theta } &amp; \text{s}_{\phi }
\text{s}_{\theta } \text{c}_{\psi } - \text{s}_{\psi } \text{c}_{\phi }
&amp; \text{s}_{\phi } \text{s}_{\psi } + \text{s}_{\theta }
\text{c}_{\phi } \text{c}_{\psi }\\\text{s}_{\psi } \text{c}_{\theta }
&amp; \text{s}_{\phi } \text{s}_{\psi } \text{s}_{\theta } +
\text{c}_{\phi } \text{c}_{\psi } &amp; - \text{s}_{\phi }
\text{c}_{\psi } + \text{s}_{\psi } \text{s}_{\theta } \text{c}_{\phi
}\\- \text{s}_{\theta } &amp; \text{s}_{\phi } \text{c}_{\theta } &amp;
\text{c}_{\phi } \text{c}_{\theta }
     \end{pmatrix}
     \label{eqn:B}
\end{aligned}\]</span></p>
<p>Equation <a href="#eqn:B" data-reference-type="ref"
data-reference="eqn:B">[eqn:B]</a> provides a clear formulation of the
rotation matrix <span class="math inline">\(B\)</span> as a function of
<span class="math inline">\(\boldsymbol{\eta}\)</span>, however, it will
also be useful to derive an expression for the angular velocity <span
class="math inline">\(\sOmega\)</span> as a function of <span
class="math inline">\(\dot{\boldsymbol{\eta}}\)</span>. To do this, we
can consider each dimension of the angular velocity as each coordinate
of <span class="math inline">\(\dot{\boldsymbol{\eta}}\)</span> is
transformed into the body-fixed frame <span
class="math inline">\(\mathcal{B}\)</span>.</p>
<p><span class="math display">\[\begin{aligned}
    \Omega_\phi
    &amp; = \begin{pmatrix} 1 \\ 0 \\ 0 \end{pmatrix}
    \dot{\phi} \\
    \Omega_\theta =
    
    \begin{pmatrix}
        1 &amp; 0 &amp; 0 \\
        0 &amp; \text{c}_{\phi} &amp; -\text{s}_{\phi} \\
        0 &amp; \text{s}_{\phi} &amp; \text{c}_{\phi} \\
    \end{pmatrix}\begin{pmatrix} 0 \\ 1 \\ 0 \end{pmatrix} \dot{\theta}
    &amp; = \begin{pmatrix} 0 \\ \text{c}_{\phi} \\ \text{s}_{\phi}
\end{pmatrix}
    \dot{\theta} \\
    \Omega_\psi =
    \begin{pmatrix}
        1 &amp; 0 &amp; 0 \\
        0 &amp; \text{c}_{\phi} &amp; -\text{s}_{\phi} \\
        0 &amp; \text{s}_{\phi} &amp; \text{c}_{\phi} \\
    \end{pmatrix}
    \begin{pmatrix}
        \text{c}_{\theta} &amp; 0 &amp; \text{s}_{\theta} \\
        0 &amp; 1 &amp; 0 \\
        -\text{s}_{\theta} &amp; 0 &amp; \text{c}_{\theta} \\
    \end{pmatrix}
    \begin{pmatrix} 0 \\ 0 \\ 1 \end{pmatrix}
    \dot{\psi}
    &amp; =
    \begin{pmatrix}
        \text{s}_{\theta} \\
        -\text{c}_{\theta} \text{s}_{\phi} \\
        \text{c}_{\theta} \text{c}_{\phi}
    \end{pmatrix}
    \dot{\psi}
\end{aligned}\]</span></p>
<p>Thus, the matrix <span
class="math inline">\(W_\boldsymbol{\eta}\)</span> can be derived, which
transforms the time-derivative of the rotation state <span
class="math inline">\(\dot{\boldsymbol{\eta}}\)</span> into the angular
velocity vector <span
class="math inline">\(\boldsymbol{\Omega}\)</span>:</p>
<p><span class="math display">\[\begin{aligned}
    \begin{pmatrix} \Omega_{\phi} \\ \Omega_{\theta} \\ \Omega_{\psi}
\end{pmatrix}
    &amp; = \underbrace{
    \begin{pmatrix}
        1 &amp; 0 &amp; \text{s}_{\theta} \\
        0 &amp; \text{c}_{\phi} &amp; -\text{c}_{\theta} \text{s}_{\phi}
\\
        0 &amp; \text{s}_{\phi} &amp; \text{c}_{\theta} \text{c}_{\phi}
    \end{pmatrix}}_{\equiv W_{\boldsymbol{\eta}}}
    \begin{pmatrix} \dot{\phi} \\ \dot{\theta} \\ \dot{\psi}
\end{pmatrix} \\
    \boldsymbol{\Omega}&amp; =
W_{\boldsymbol{\eta}}\dot{\boldsymbol{\eta}}
\end{aligned}\]</span></p>
<h2 id="state">State</h2>
<p>Along with the Euler-angle representation, I will consider the
Cartesian coordinates of the center of mass of the drone as generalized
coordinates to represent translations of the body frame:</p>
<div class="flalign">
<p>=</p>
<div class="pmatrix">
<p>x &amp; y &amp; z</p>
</div>
<p>^T , =</p>
<div class="pmatrix">
<p>&amp; &amp;</p>
</div>
<p>^T</p>
</div>
<p>Thus, the following generalized coordinates together define a
6-degree-of-freedom dynamical system with the state <span
class="math inline">\(\boldsymbol{q}\)</span>:</p>
<div class="flalign">
<p>=</p>
<div class="pmatrix">
<p><br />
</p>
</div>
</div>
<h1 id="dynamics">Dynamics</h1>
<h2 id="lagrangian">Lagrangian</h2>
<p>The Lagrangian <span class="math inline">\(L\)</span> is defined
as:</p>
<div class="flalign">
<p>L (, ) &amp; = T - V</p>
</div>
<p>This system is nearly identical to rigid body free rotation; however
the Lagrangian has nonzero potential energy since the quadcopter is
subject to gravity. As we have shown in class, the kinetic energy in
this case is the same as in free rigid body rotation:</p>
<div class="flalign">
<p>T &amp; = _ + _<br />
&amp; = ^T _<span>J ()</span> + m ^T<br />
&amp; = ^T J() + m ^T</p>
</div>
<p>And the potential energy can be determined from these coordinates in
the standard way using the gravitational potential:</p>
<div class="flalign">
<p>V &amp; = m g z = m g (|<span>e</span>_3)</p>
</div>
<p>Thus, the entire Lagrangian is given by:</p>
<div class="flalign">
<p>L(, ) &amp; = ^T J() + m ^T - m g (|<span>e</span>_3)</p>
</div>
<h2 id="translations">Translations</h2>
<p>Since the equation is linear, we can split the Lagrangian into a sum
of two functions, i.e. <span class="math inline">\(L(\boldsymbol{q},
\dot{\boldsymbol{q}}) = L(\boldsymbol{\eta}, \dot{\boldsymbol{\eta}}) +
L(\boldsymbol{\xi}, \dot{\boldsymbol{\xi}})\)</span> and consider them
separately. First, the derivatives of <span
class="math inline">\(L(\boldsymbol{\xi},
\dot{\boldsymbol{\xi}})\)</span>, which are relatively straightforward
to derive:</p>
<p><span class="math display">\[\begin{gathered}
    \frac{\partial L}{\partial \boldsymbol{\xi}} = - mg \bar{e}_3 =
    \begin{pmatrix} 0 &amp; 0 &amp; - mg \end{pmatrix}^T \\
    \frac{\partial L}{\partial \dot{\boldsymbol{\xi}}} = m
\dot{\boldsymbol{\xi}}
    , \quad
    \frac{d }{d t}\frac{\partial L}{\partial \dot{\boldsymbol{\xi}}} = m
\ddot{\boldsymbol{\xi}}
\end{gathered}\]</span></p>
<p>These results lead to the following equation of motion for the
translation dynamics of the quadcopter using the Euler-Lagrange
Equation:</p>
<div class="flalign">
<p>- &amp; =<br />
m + m g |<span>e</span>_3 &amp; =<br />
&amp; = ( - mg |<span>e</span>_3 )</p>
</div>
<h2 id="rotations">Rotations</h2>
<p>The derivatives of <span class="math inline">\(L(\boldsymbol{\eta},
\dot{\boldsymbol{\eta}})\)</span>, however, are more difficult to
determine as they are higher-dimensional:</p>
<div class="flalign">
<p>&amp; = ( ^T J ) <span id="eqn:dldeta"
label="eqn:dldeta"></span><br />
&amp; = ( ^T J ) = ( J )<br />
&amp; = _i ( J_<span>i *</span> _i ) _i = _i J_<span>i *</span>
_i^2<br />
&amp; = _i J_<span>i *</span> _i = J <span id="eqn:dldetad"
label="eqn:dldetad"></span><br />
&amp; = + J <span id="eqn:ddtdldetad" label="eqn:ddtdldetad"></span></p>
</div>
<p>Equation <a href="#eqn:dldeta" data-reference-type="ref"
data-reference="eqn:dldeta">[eqn:dldeta]</a> is the most complicated
expression; it is a 3x3 Jacobian matrix, the derivative of a vector
<span class="math inline">\(\dot{\boldsymbol{\eta}}^T J\)</span> with
respect to a vector <span
class="math inline">\(\boldsymbol{\eta}\)</span>. What makes this
expression difficult to compute, however, are the large amount of terms
that come out of the derivative given that <span class="math inline">\(J
= W_{\boldsymbol{\eta}}^T I W_{\boldsymbol{\eta}}\)</span>. A full
definition of this variable is given in the appendix section <a
href="#app:coriolis" data-reference-type="ref"
data-reference="app:coriolis">7.1</a>. Equation <a href="#eqn:dldetad"
data-reference-type="ref"
data-reference="eqn:dldetad">[eqn:dldetad]</a>, however, is more like a
normal derivative; the product rule can be used to split the derivative
into a sum of dot products and then computed using a summation,
eventually leading to the definition of matrix multiplication which
yields <span class="math inline">\(J
\dot{\boldsymbol{\eta}}\)</span>.</p>
<p>The equation of rotational motion can also be determined using the
Euler-Lagrange Equation:</p>
<div class="flalign">
<p>- &amp; =<br />
+ J + ( ^T J ) &amp; =<br />
J + _<span>C(, )</span> &amp; =<br />
J + C(, ) &amp; =<br />
&amp; = J^<span>-1</span> ( - C(, ) )<br />
</p>
</div>
<p>Here, the Jacobian matrix previously discussed as well as the
time-derivative of <span class="math inline">\(J\)</span> are combined
into the Coriolis matrix <span
class="math inline">\(C(\boldsymbol{\eta},
\dot{\boldsymbol{\eta}})\)</span>. The complete equations of motion of
the quadrotor are thereby given by the following system:</p>
<p><span class="math display">\[\begin{cases}
        \ddot{\boldsymbol{\xi}} &amp; = \frac{1}{m} \left(
\boldsymbol{f}- mg \bar{e}_3 \right) \\
        \ddot{\boldsymbol{\eta}} &amp; =
        J^{-1} \left( \boldsymbol{\tau}- C(\boldsymbol{\eta},
\dot{\boldsymbol{\eta}}) \dot{\boldsymbol{\eta}} \right)
    \end{cases}\]</span></p>
<h1 id="sec:controls">Controls</h1>
<p>In order to better test the simulation of the dynamics, it will be
useful to first derive a simple PID controller to stabilize the drone
horizontally, i.e., <span class="math inline">\(\boldsymbol{\eta},
\dot{\boldsymbol{\eta}} \rightarrow 0\)</span>. To do this, I will
consider a controller <span
class="math inline">\(\boldsymbol{u}\)</span> which takes <span
class="math inline">\(\dot{\boldsymbol{\eta}}\)</span> as an input and
outputs the angular velocity of each propeller <span
class="math inline">\(\omega_i\)</span>. The controller is defined as
follows <span class="citation"
data-cites="gibiansky2012andrew"></span>:</p>
<div class="flalign">
<p>&amp; = ^c - =<br />
&amp; = k_p + k_i _0^t dt + k_d<br />
&amp; = k_p + k_i _0^t dt + k_d</p>
</div>
<p>The controller generates a torque about the center of mass of the
quadcopter, which is described in Equation <a href="#eqn:torque"
data-reference-type="ref" data-reference="eqn:torque">[eqn:torque]</a>
(Let <span class="math inline">\(\gamma_i = \omega_i^2\)</span>). If we
ignore the Coriolis matrix (which is not an unreasonable approximation;
it is composed of nearly all higher-order terms) then we have the
following equation for the controller:</p>
<div class="flalign">
<div class="pmatrix">
<p>kl (_1 - _3)<br />
kl (_2 - _4)<br />
b (_1 - _2 + _3 - _4)</p>
</div>
<p>= J</p>
</div>
<p>However, this is a system of 4 unknowns and only 3 equations. If we
further constrain the sum of generated forces to keep the quadrotor
hovering, i.e., <span class="math inline">\(\boldsymbol{f}_3 = mg
\bar{e}_3\)</span>, then we have an additional constraint. Note, in
order to generate this force in the inertial frame, the drone must
generate a force <span class="math inline">\(T =
\frac{mg}{\text{c}_{\theta} \text{c}_{\phi}}\)</span> in the body frame.
This leads to the following system of equations (Let <span
class="math inline">\(J \boldsymbol{u}= \boldsymbol{j}\)</span>, <span
class="math inline">\(\boldsymbol{j}_i = j_i\)</span>):</p>
<div class="flalign">
<div class="pmatrix">
<p>kl (_1 - _3)<br />
kl (_2 - _4)<br />
b (_1 - _2 + _3 - _4)<br />
k (_1 + _2 + _3 + _4)</p>
</div>
<p>=</p>
<div class="pmatrix">
<p>j_1<br />
j_2<br />
j_3<br />
T</p>
</div>
</div>
<p>This system has the following solution:</p>
<div class="flalign">
<div class="pmatrix">
<p>_1<br />
_2<br />
_3<br />
_4</p>
</div>
<p>= +</p>
<div class="pmatrix">
<p>-j_1<br />
-j_2<br />
j_2<br />
j_2</p>
</div>
<p>+</p>
<div class="pmatrix">
<p>-j_3<br />
j_3<br />
-j_3<br />
j_3</p>
</div>
</div>
<h1 id="simulations">Simulations</h1>
<h2 id="pure-dynamics">Pure Dynamics</h2>
<p>In the absence of a physical drone to carry out experiments, I will
conduct a series of simulated experiments and test assumptions made
about the dynamics of the system in order to validate the equations of
motion. These simple results are more of a sanity check than anything,
to ensure that the simplest quadcopter maneuvers are accurately captured
by the dynamics. Each trajectory is represented by four “traces” showing
the path of each rotor, which starts at a blue color and gradually
becomes pink as time progresses.</p>
<p>The first assumption is that applying a net upward force slightly
greater than the weight of the quadcopter split across each rotor (with
zero torque) should lead to a straight takeoff. Figure <a
href="#fig:takeoff_straight" data-reference-type="ref"
data-reference="fig:takeoff_straight">4</a> supports this hypothesis,
showing an increase in the z coordinate that grows steeper over
time.</p>
<figure>
<img src="figures/takeoff-straight/traj3d.png" id="fig:takeoff_straight"
style="width:100.0%" alt="Straight Takeoff" />
<figcaption aria-hidden="true">Straight Takeoff</figcaption>
</figure>
<figure>
<img src="figures/takeoff-straight/traj2d.png" id="fig:takeoff_straight"
style="width:100.0%" alt="Straight Takeoff" />
<figcaption aria-hidden="true">Straight Takeoff</figcaption>
</figure>
<p>In the next experiment, I will simulate a similar takeoff condition,
except with an initial angular velocity imposed on the quadcopter, such
that the trajectory immediately becomes unstable. These conditions test
the limits of the numerical integration technique, however, with enough
precision it is possible to determine the flight path of the drone and
its wild oscillations in this state. The results of this experiment also
show the instability that nearly all modes of quadrotor flight exhibit.
Once tumbling in such a manner, it is difficult even for a well-tuned
controller to stabilize the drone.</p>
<figure>
<img src="figures/tumble/traj3d.png" id="fig:tumble"
style="width:100.0%" alt="Tumble" />
<figcaption aria-hidden="true">Tumble</figcaption>
</figure>
<figure>
<img src="figures/tumble/traj2d.png" id="fig:tumble"
style="width:100.0%" alt="Tumble" />
<figcaption aria-hidden="true">Tumble</figcaption>
</figure>
<p>Again, these results are not meant to provide a useful example of the
quadrotor dynamics, but rather to display empirical results of the
derived equations of motion and to verify that simple expectations about
the flight of a quadcopter can be reproduced in the simulation. In the
next section, I will present experiments carried out with an actually
useful controller.</p>
<h2 id="simulated-control">Simulated Control</h2>
<p>One of the simplest tests to carry out using the controller described
in Section <a href="#sec:controls" data-reference-type="ref"
data-reference="sec:controls">4</a> is a step response, in which the
quadcopter starts out with a nonzero initial angular position and
velocity and uses the controller to drive this error to zero. In this
experiment, the initial angular velocity used was twice the amount of
the angular velocity used in the “Tumble” experiment (Figure <a
href="#fig:tumble" data-reference-type="ref"
data-reference="fig:tumble">6</a>).</p>
<figure>
<img src="figures/step/traj3d.png" id="fig:step" style="width:100.0%"
alt="Step Response" />
<figcaption aria-hidden="true">Step Response</figcaption>
</figure>
<figure>
<img src="figures/step/traj2d.png" id="fig:step" style="width:100.0%"
alt="Step Response" />
<figcaption aria-hidden="true">Step Response</figcaption>
</figure>
<p>In this response, note that the quadcopter was able to also stay
steady in the z-axis; this is because the controller is designed to
always produce an upwards thrust equal to the quadcopter’s weight,
regardless of its orientation. Within 5 seconds of this simulation, the
quadcopter is able to drive both its angular velocity and position to
zero as hypothesized. Despite the efforts of the controller, however,
there is still some “drift” during the maneuver. This is to be expected,
since the controller does not depend on the x or y position and only
depends on the rotation.</p>
<figure>
<img src="figures/recovery/traj3d.png" id="fig:recovery"
style="width:100.0%" alt="Takeoff Recovery" />
<figcaption aria-hidden="true">Takeoff Recovery</figcaption>
</figure>
<figure>
<img src="figures/recovery/traj2d.png" id="fig:recovery"
style="width:100.0%" alt="Takeoff Recovery" />
<figcaption aria-hidden="true">Takeoff Recovery</figcaption>
</figure>
<p>For the final test, I simulate a “faulty takeoff,” (or simply, a
delayed step response) in which two neighboring propellers are jammed
and produce less thrust than the opposite two, leading to a tilt and
imminent tumble. A quarter of the way through the simulation, however,
the stabilizing controller turns on and is able to quickly correct the
misalignment.</p>
<h1 id="discussion">Discussion</h1>
<p>In this project I have shown how to derive the equations of motion of
a quadcopter using the Lagrangian formulation of dynamics and verified
the result using numerical methods. Additionally, I have implemented a
simple PID control system to stabilize the drone horizontally and
likewise verified its effectiveness in simulations. While the dynamics
of a quadcopter can be derived in varying levels of complexity, this
work shows that even a simple approach using the Euler-Lagrange
equations can yield substantial results when combined with numerical
simulation, and although the derived equations are simple enough, they
describe an extremely detailed evolution of the physical system that can
be used for many purposes.</p>
<p>Some directions for future work involve more complex methods of
representing the rotations of a rigid body in 3D, for example,
quaternions, which don’t suffer from gimbal lock, and of course more
effective controllers which can be implemented using these
parametrizations <span class="citation"
data-cites="fresk2013full"></span>. Also, there are countless specific
applications for quadcopters which can be studied more directly from the
perspective of the dynamics, for example in FPV drone racing where it is
necessary to maximize the speed of the drone to gain a competitive edge,
or in surveillance where sound generated by the rotors could be a main
concern.</p>
<p>Another course of interest could be to focus on the numerical
simulation itself, as numerical methods are key to realizing the power
of any dynamics derivation, and there are more advanced integration
methods (for example, Runge-Kutta) than the naive Euler integration used
in this project, which could potentially improve the realism of the
simulated results as well as prevent divergence when functions are not
smooth.</p>
<h1 id="appendix">Appendix</h1>
<h2 id="app:coriolis">Coriolis Matrix</h2>
<p>The entire Coriolis Matrix <span
class="math inline">\(C(\boldsymbol{\eta},
\dot{\boldsymbol{\eta}})\)</span> is given by the following expression
<span class="citation" data-cites="nakano2013quad"></span>:</p>
<figure>
<img src="figures/cmatrix.png" id="fig:coriolis" style="width:100.0%"
alt="Coriolis Matrix" />
<figcaption aria-hidden="true">Coriolis Matrix</figcaption>
</figure>
</body>
</html>
